restart:
with(Maplets):
with(Maplets[Elements]):
MyDir:="C:\\Users\\emiro\\OneDrive\\Рабочий стол\\проги\\ВМК\\5sem\\Maple\\project\\":
restart:
with(Maplets):
with(Maplets:-Elements):
with(plots):
NUM:=20:
per:=0: comp:=0: x:=[]: x_nach:=[]:
setoptions3d(axes=none, orientation=[92, 138]):
with(student):

GRD := GridLayout['GR1'](
        GridRow(
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())),
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())),
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())), 
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown()))
        )
):
HelpInfo:="Визуализатор алгоритмов поиска\n
        \tВведите набор чисел в файл data.txt, расположенный в текущей директории.\n
        \tВведите число, номер которого в этом наборе Вы хотите найти.\n
        \tЕсли массив неупорядочен, в нем применим только линейный поиск.
 \tВ случае отсортированного массива Вы можете выбрать желаемый метод поиска из следующего списка:\n
 \t\tЛинейный\n
 \t\tБинарный\n
 \t\tТернарный\n":

NUM:=20:
per:=0: comp:=0: x:=[]: x_nach:=[]:

CreateArr:=proc(NUM)
    local i,j,xr;
    global x,x_nach;
    Randomize():
    x:=[]:
    x_nach:=[]:
    for i from 1 to NUM do
        xr:=rand(0..NUM);
        x:=[x[],xr()];
        x_nach:=[x_nach[],x[i]];
        for j from 1 to i-1 do
            if (x[i]=x[j]) then
                xr:=rand(10..NUM+20);
                x[i]:=xr();
                x_nach[i]:=x[i];
                j:=1;
            end if;
        end do;   
    end do:
end proc:

CreateArr(NUM);
Change:=proc()
 local x1,i,C;
 global per,comp,a;
 x1:=[];
 for i from 1 to NUM do
  x1:=[x1[],x_nach[i]];
 end do:
 if (Maplets:-Tools:-Get('RBBubble'('value'))) then 
 Maplets:-Tools:-Set('P1'=Bubble(x1)):
 Maplets:-Tools:-Set('LBubble'('caption')=cat(cat(cat("Bubble (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBChoice'('value'))) then 
 Maplets:-Tools:-Set('P1'=Choice(x1)):
 Maplets:-Tools:-Set('LChoice'('caption')=cat(cat(cat("Choice (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBShell'('value'))) then 
 Maplets:-Tools:-Set('P1'=Shell(x1)):
 Maplets:-Tools:-Set('LShell'('caption')=cat(cat(cat("Shell (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBHoare'('value'))) then 
 per:=0; comp:=0; a:=x1;
 C:=Hoare(1,NUM,true,[]);
 Maplets:-Tools:-Set('P1'=display(C,insequence=true)):
 Maplets:-Tools:-Set('LHoare'('caption')=cat(cat(cat("Hoare (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 else Display(Maplet(["Unexpected Error!"]));
end if;
end proc:
ReSort:=proc()
global NUM,per,comp,a,x_nach,x;
local x1,i,C;
NUM:=Maplets:-Tools:-Get('Sl');
CreateArr(NUM);
x_nach:=x;
Maplets:-Tools:-Set('LBubble'('caption')="Bubble (?, ?) "):
Maplets:-Tools:-Set('LChoice'('caption')="Choice (?, ?) "):
Maplets:-Tools:-Set('LShell'('caption')="Shell (?, ?) "):
Maplets:-Tools:-Set('LHoare'('caption')="Hoare (?, ?) "):
 x1:=[];
 for i from 1 to NUM do
  x1:=[x1[],x_nach[i]];
 end do:
 if (Maplets:-Tools:-Get('RBBubble'('value'))) then 
 Maplets:-Tools:-Set('P1'=Bubble(x1)):
 Maplets:-Tools:-Set('LBubble'('caption')=cat(cat(cat("Bubble (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBChoice'('value'))) then 
 Maplets:-Tools:-Set('P1'=Choice(x1)):
 Maplets:-Tools:-Set('LChoice'('caption')=cat(cat(cat("Choice (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBShell'('value'))) then 
 Maplets:-Tools:-Set('P1'=Shell(x1)):
 Maplets:-Tools:-Set('LShell'('caption')=cat(cat(cat("Shell (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 elif (Maplets:-Tools:-Get('RBHoare'('value'))) then 
 per:=0; comp:=0; a:=x1;
 C:=Hoare(1,NUM,true,[]);
 Maplets:-Tools:-Set('P1'=display(C,insequence=true)):
 Maplets:-Tools:-Set('LHoare'('caption')=cat(cat(cat("Hoare (",convert(comp,string)),
                      cat(" ,",convert(per,string))),")")):
 else Display(Maplet(["Unexpected Error!"]));
end if;
end proc:
ShowHelp:=proc()
Display(
  Maplet(
   Window(
    title="Help", width=400, height=400, resizable=false,
    layout=
     BoxLayout(
      ["\tСортировки",
      "\tРазличные алгоритмы сортировки представлены в данном приложении. Предоставлена возможность просмотра самого хода сортировки и оценки ее эфективности на основании количества произведенных операций сравнений и замены.\n
\tВ режиме анимации представлен сам ход сортировки. Характеристики каждой сортировки зафиксированы в формате (Количество операций сравнений, Количество замен).\n
\tОценка сложности каждого алгоритма находим по формуле: Количество замен + (Количество сравнений / 2). Данные характеристики находим по каждому методу на массивах разной длины.\n
\tПри работе была использована книга Д.Кнута \"The Art of Programming. Том 3.\" \"Сортировка и поиск - 2 изд.\" В книге есть полный обзор классических алгоритмов сортировки и поиска.\n", 
      Button("OK",onclick=Shutdown())
      ]
     )
   )
  )
 )
end proc:
ShowAbout:=proc()
 Display(
  Maplet(
   Window(
    title="About",resizable=false,
    layout=
     BoxLayout(
      ["\tДанное приложение - это",
       "\tпрактикум по СПП.",
       "\tВыполнил студент группы ПМ-401",
       "\tФакультета Компьютерной",
       "\tматематики ЧФ МГУ",
       Label('halign'=center,'valign'=top,image=Shovkovy),
       "\tШовковый Александр Сергеевич",
       "\t2005. Почти все права защищены.",
       Button("OK",onclick=Shutdown())
      ]
     )
   ),
   Image[Shovkovy](cat(MyDir,"\\Shovkovy.jpg"))
  )
 )
end proc:
ShowStat:=proc()
#--------Statistics------------
local N,x,Est,X,A,ST,x_save;
global comp, exch, NUM, a, x_nach;
N:=NUM;
A:=[]; x_save:=x_nach;
for NUM from 10 to 20 by 2 do
CreateArr(NUM);
comp:=0; exch:=0; Est:=[];
  a:=x_nach; SHoare(1,NUM,true,[]); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SShell(x); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SChoice(x); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SBubble(x); Est:=[Est[],exch+round(comp/3)];
  X:=convert([Est],matrix):
  ST:=convert(NUM,string);
  A:=[A[],matrixplot(X, heights=histogram, title=cat(cat("Number of elements = ",ST),"\n\nBubble   Choice   Shell   Hoare"))]:
end do:
NUM:=N; x_nach:=x_save;   
Display(
  Maplet(
   Window(
    title="Statistics",resizable=false,
    layout=
    BoxLayout(
    BoxColumn(
     BoxRow(border=true,
      BoxCell("Overall costs")
     ),
     BoxRow(border=true,
      BoxCell(
       Plotter[P2](display(A,insequence=true), continuous=false, background=grey))
     ),
     BoxRow(border=true,
      BoxCell(
       Button("         Next         ",SetOption(P2('frame_forward')=true)))
     ) 
    )
    )
   )
  )
 )
end proc:
ShowEst:=proc()
#--------Estimation------------
local N,x,Est,X,A,ST,ST2,x_save,i;
global comp, exch, NUM, a;
N:=NUM; x_save:=x_nach;
comp:=0; exch:=0; Est:=[];
a:=x_nach;
  SHoare(1,NUM,true,[]); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SShell(x); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SChoice(x); Est:=[Est[],exch+round(comp/3)];
  x:=x_nach; SBubble(x); Est:=[Est[],exch+round(comp/3)];
  X:=convert([Est],matrix):
  ST2:=cat("\n",convert(ListTools[Reverse](x_nach),string));
  ST:=convert(NUM,string);
  A:=matrixplot(X, heights=histogram, title=cat(cat(cat("Number of elements = ",ST),"\n\nBubble   Choice   Shell   Hoare"),ST2)):
NUM:=N;   
Display(
  Maplet(
   Window(
    title="Estimation",resizable=false,
    layout=
    BoxLayout(
    BoxColumn(
     BoxRow(border=true,
      BoxCell("Overall costs")
     ),
     BoxRow(border=true,
      BoxCell(
       Plotter[P3](display(A,insequence=true), continuous=false, background=grey))
     ),
     BoxRow(border=true,
      BoxCell(
       Button("         OK         ",onclick=Shutdown()))
     ) 
    )
    )
   )
  )
 )
end proc:

Linear_search1:=proc(arr, key)
    local N,i;
    N:=nops(arr);
    for i from 1 to N do
        if (arr[i]=key) then
            return i;
        end if:
    end do:
    return N
end proc:

Linear_search2:=proc(arr, key)
    local i;
    Append(arr, key);
    i:=1;
    do
        i:=i+1
    until(arr[i]=key):
    return i
end proc:

Binary_search := proc(arr, key) local left, middle, right; left := 1; right := nops(arr); do break; if right < left; middle := floor(1/2*left + 1/2*right); if arr[middle] = key then return middle; end if; if arr[middle] < key then left := middle + 1; end if; if key < arr[middle] then right := middle - 1; end if; end do; end proc;

Ternary_search := proc(arr, key) local left, left_mid, right_mid, right; left := 1; right := nops(arr); do break; if right < left; left_mid := left + floor(1/3*right - 1/3*left); right_mid := left + floor(2/3*right - 2/3*left); if arr[left_mid] = key then return left_mid; end if; if arr[right_mid] = key then return right_mid; end if; if key < arr[left_mid] then right := left_mid - 1; end if; if arr[right_mid] < key then left := right_mid + 1; end if; if arr[left_mid] < key and key < arr[right_mid] then left := left_mid + 1; right := right_mid - 1; end if; end do; end proc;

MyDir := "C:\\Users\\emiro\\OneDrive\\Рабочий стол\\проги\\ВМК\\5sem\\Maple\\project\\";
data := readdata(cat(MyDir, "data.txt"), 10);
arr := data[1];
m:=[1, 2, 3, 5, 7, 10, 30, 100];
Ternary_search(arr, 4);
NULL;
Bubble:=proc(XXX)
    local X,N,A,p,exch,i,j,a,x,ST;
    global comp,per;
    x:=XXX;
    X:=convert([x],matrix):
    ST:=cat("\n",convert(ListTools[Reverse](x),string));
    A:=[matrixplot(X, heights=histogram, title=cat("BUBBLE.\nComparisons=0 Exchanges=0",ST))]:
    exch:=true:
    N:=0: comp:=0;
    while (exch) do
        exch:=false; 
        for i from 1 to (NUM-1) do
            comp:=comp+1;
            if (x[i]>x[i+1]) then
                a:=x[i];
                x[i]:=x[i+1];
                x[i+1]:=a;
                X:=convert([x],matrix);
                N:=N+1;
                ST:=cat("\n",convert(ListTools[Reverse](x),string));
                A:=[A[],matrixplot(X, heights=histogram,
                    title=cat(cat(cat("BUBBLE.\nComparisons=",convert(comp,string)),
                    cat(" Exchanges=",convert(N,string))),ST) )];
                exch:=true;
            end if;
        end do:
    end do:
    ST:=cat("\n",convert(ListTools[Reverse](x),string));
    A:=[A[],matrixplot(X, heights=histogram,
        title=cat(cat(cat("BUBBLE.\nComparisons=",convert(comp,string)),
        cat(" Exchanges=",convert(N,string))),ST))];
    p:=display(A,insequence=true):
    per:=N;
    return p;
end proc:

maplet := Maplet(
        onstartup = Action(RunWindow('W0')),
        Window[W0](
            title="Визуализация алгоритмов поиска",resizable=true, width = 800, height = 800, menubar = 'MB1', GRD,
            layout=BoxLayout(
                BoxColumn(
                    BoxRow(border=true,
                        BoxCell(RadioButton[RBBubble]("Linear1",group=BG,value=true)),
                        BoxCell(RadioButton[RBChoice]("Linear2",group=BG,value=false)),
                        BoxCell(RadioButton[RBShell]("Binary",group=BG,value=false)),
                        BoxCell(RadioButton[RBHoare]("Ternary",group=BG,value=false))
                    ),
                    BoxRow(border=true,
                        BoxCell(Button("Estimate",onclick=Evaluate(function="ShowEst"))), 
                        BoxCell(Slider['Sl'](10..20, NUM,onchange='ChangeMas','showticks', 'majorticks'=10, 'minorticks'=2,'snapticks'=true))
                    ),
                    BoxRow(border=true,
                        BoxCell(Label[LBubble]("Linear1 (?)")),
                        BoxCell(Label[LChoice](cat(cat(cat("Linear2 (",convert(comp,string)), cat(" ,",convert(per,string))),")"))),
                        BoxCell(Label[LShell]("Binary (?)")),
                        BoxCell(Label[LHoare]("Ternary (?)"))
                    ),
                    BoxRow(border=true,
                        BoxCell(Button("Statistics",onclick=Evaluate(function="ShowStat"))),
                        BoxCell(Button("Help",onclick=Evaluate(function="ShowHelp"))),
                        BoxCell(Button("About",onclick=Evaluate(function="ShowAbout")))
                    )
                )
            )    
        ),
        Window[W1](title = "Справка", width = 700, height = 700, [HelpInfo]),
        Window[W2](title = "Об авторе", width = 700, height = 700,
                   layout=BoxLayout(["\tИнформация об авторе:\n
                                      \tЭмиров Самир 313 группа\n
                                      \temail: samir.emirov.2001@mail.ru\n
                                      \tGitHub: https://github.com/alavessi/CMC-prac-5sem\n
                                      \tОсень 2022\n",
                                    Label('halign'=center,'valign'=center,image=MyPhoto, Button("OK",onclick=Shutdown()))])),
        Image[MyPhoto](cat(MyDir,"\\photo.jpg")),
        Window[W3](title = "О программе", width = 700, height = 700, ["Программа разработана на языке Maple в 2022 году"]),
        MenuBar['MB1'](
                Menu("Файл", MenuItem("Новый массив (&N)", Shutdown()), MenuSeparator(), MenuItem("Выход (&Q)", Shutdown())),
                Menu("Тип массива", MenuItem("Отсортированный (&S)", Shutdown()), MenuSeparator(), MenuItem("Неотсортированный (&R)", Shutdown())),
                Menu("Метод поиска", MenuItem("Линейный (&L)", Shutdown()), MenuSeparator(), MenuItem("Бинарный (&B)", Shutdown()), MenuSeparator(), MenuItem("Тернарный (&T)", Shutdown())),
                Menu("Помощь", MenuItem("Руководство пользователя (&H)", RunWindow('W1')), MenuSeparator(), MenuItem("Об авторе (&A)", RunWindow('W2')), MenuSeparator(),
                     MenuItem("О программе (&D)", RunWindow('W3')))
        ),
        ButtonGroup[BG](onchange=Evaluate(function="Change")),
        Action['ChangeMas'](Evaluate(function='ReSort'))
):
Maplets[Display](maplet);
