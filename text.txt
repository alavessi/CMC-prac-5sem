restart:
with(Maplets):
with(Maplets[Elements]):
MyDir:="C:\\Users\\emiro\\OneDrive\\Рабочий стол\\проги\\ВМК\\5sem\\Maple\\project\\":
restart:
with(Maplets):
with(Maplets:-Elements):
with(plots):
NUM:=20:
per:=0: comp:=0: x:=[]: x_nach:=[]:
setoptions3d(axes=none, orientation=[92, 138]):
with(student):

GRD := GridLayout['GR1'](
        GridRow(
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())),
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())),
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown())), 
                GridCell(Button("", height = 40, width = 40, onclick = Shutdown()))
        )
):
HelpInfo:="Визуализатор алгоритмов поиска\n
        \tВведите набор чисел в файл data.txt, расположенный в текущей директории.\n
        \tВведите число, номер которого в этом наборе Вы хотите найти.\n
        \tЕсли массив неупорядочен, в нем применим только линейный поиск.
 \tВ случае отсортированного массива Вы можете выбрать желаемый метод поиска из следующего списка:\n
 \t\tЛинейный\n
 \t\tБинарный\n
 \t\tТернарный\n":

NUM:=20:
per:=0: comp:=0: x:=[]: x_nach:=[]:

CreateArr:=proc(NUM)
    local i,j,xr;
    global x,x_nach;
    Randomize():
    x:=[]:
    x_nach:=[]:
    for i from 1 to NUM do
        xr:=rand(0..NUM);
        x:=[x[],xr()];
        x_nach:=[x_nach[],x[i]];
        for j from 1 to i-1 do
            if (x[i]=x[j]) then
                xr:=rand(10..NUM+20);
                x[i]:=xr();
                x_nach[i]:=x[i];
                j:=1;
            end if;
        end do;   
    end do:
end proc:

CreateArr(NUM);

Linear_search1:=proc(arr, key)
    local N,i;
    N:=nops(arr);
    for i from 1 to N do
        if (arr[i]=key) then
            return i;
        end if:
    end do:
    return N
end proc:

Linear_search2:=proc(arr, key)
    local i;
    Append(arr, key);
    i:=1;
    do
        i:=i+1
    until(arr[i]=key):
    return i
end proc:

Binary_search := proc(arr, key) local left, middle, right; left := 1; right := nops(arr); do break; if right < left; middle := floor(1/2*left + 1/2*right); if arr[middle] = key then return middle; end if; if arr[middle] < key then left := middle + 1; end if; if key < arr[middle] then right := middle - 1; end if; end do; end proc;
Ternary_search := proc(arr, key) local left, left_mid, right_mid, right; left := 1; right := nops(arr); do break; if right < left; left_mid := left + floor(1/3*right - 1/3*left); right_mid := left + floor(2/3*right - 2/3*left); if arr[left_mid] = key then return left_mid; end if; if arr[right_mid] = key then return right_mid; end if; if key < arr[left_mid] then right := left_mid - 1; end if; if arr[right_mid] < key then left := right_mid + 1; end if; if arr[left_mid] < key and key < arr[right_mid] then left := left_mid + 1; right := right_mid - 1; end if; end do; end proc;
MyDir := "C:\\Users\\emiro\\OneDrive\\Рабочий стол\\проги\\ВМК\\5sem\\Maple\\project\\";

data := readdata(cat(MyDir, "data.txt"), 10);
arr := data[1];

m:=[1, 2, 3, 5, 7, 10, 30, 100];

Ternary_search(arr, 4);

Bubble:=proc(XXX)
    local X,N,A,p,exch,i,j,a,x,ST;
    global comp,per;
    x:=XXX;
    X:=convert([x],matrix):
    ST:=cat("\n",convert(ListTools[Reverse](x),string));
    A:=[matrixplot(X, heights=histogram, title=cat("BUBBLE.\nComparisons=0 Exchanges=0",ST))]:
    exch:=true:
    N:=0: comp:=0;
    while (exch) do
        exch:=false; 
        for i from 1 to (NUM-1) do
            comp:=comp+1;
            if (x[i]>x[i+1]) then
                a:=x[i];
                x[i]:=x[i+1];
                x[i+1]:=a;
                X:=convert([x],matrix);
                N:=N+1;
                ST:=cat("\n",convert(ListTools[Reverse](x),string));
                A:=[A[],matrixplot(X, heights=histogram,
                    title=cat(cat(cat("BUBBLE.\nComparisons=",convert(comp,string)),
                    cat(" Exchanges=",convert(N,string))),ST) )];
                exch:=true;
            end if;
        end do:
    end do:
    ST:=cat("\n",convert(ListTools[Reverse](x),string));
    A:=[A[],matrixplot(X, heights=histogram,
        title=cat(cat(cat("BUBBLE.\nComparisons=",convert(comp,string)),
        cat(" Exchanges=",convert(N,string))),ST))];
    p:=display(A,insequence=true):
    per:=N;
    return p;
end proc:

maplet := Maplet(
        onstartup = Action(RunWindow('W0')),
        Window[W0](
            title="Визуализация алгоритмов поиска",resizable=true, width = 500, height = 500, menubar = 'MB1', GRD,
            layout=BoxLayout(
                BoxColumn(
                    BoxRow(border=true,
                        BoxCell(RadioButton[RBBubble]("Linear1",group=BG,value=true)),
                        BoxCell(RadioButton[RBChoice]("Linear2",group=BG,value=false)),
                        BoxCell(RadioButton[RBShell]("Binary",group=BG,value=false)),
                        BoxCell(RadioButton[RBHoare]("Ternary",group=BG,value=false))
                    ),
                    BoxRow(border=true,
                        BoxCell(Button("Estimate",onclick=Evaluate(function="ShowEst"))), 
                        BoxCell(Slider['Sl'](10..20, NUM,onchange='ChangeMas','showticks', 'majorticks'=10, 'minorticks'=2,'snapticks'=true))
                    )
                )
            )
        ),
        Window[W1](title = "Справка", width = 350, height = 300, [HelpInfo]),
        Window[W2](title = "Об авторе", width = 250, height = 150, ["Информация об авторе.", "Эмиров Самир 313 группа", "email: samir.emirov.2001@mail.ru", "Осень 2022",
                   Label(Image(Picblue))]),
        Window[W3](title = "О программе", width = 350, height = 100, ["Программа разработана на языке Maple в 2022 году"]),
        MenuBar['MB1'](
                Menu("Файл", MenuItem("Новый массив", Shutdown()), MenuSeparator(), MenuItem("Выход", Shutdown())),
                Menu("Тип массива", MenuItem("Отсортированный", Shutdown()), MenuSeparator(), MenuItem("Неотсортированный", Shutdown())),
                Menu("Метод поиска", MenuItem("Линейный", Shutdown()), MenuSeparator(), MenuItem("Бинарный", Shutdown()), MenuSeparator(), MenuItem("Тернарный", Shutdown())),
                Menu("Помощь", MenuItem("Руководство пользователя", RunWindow('W1')), MenuSeparator(), MenuItem("Об авторе", RunWindow('W2')), MenuSeparator(),
                     MenuItem("О программе", RunWindow('W3')))
        ),
        ButtonGroup[BG](onchange=Evaluate(function="Change")),
        Action['ChangeMas'](Evaluate(function='ReSort'))
):
Maplets[Display](maplet);

M:=Maplet(
    Window(
        title="Visualization of search methods",resizable=false,
        layout=BoxLayout(
            BoxColumn(
                BoxRow(border=true,
                    BoxCell(RadioButton[RBBubble]("Linear1",group=BG,value=false)),
                    BoxCell(RadioButton[RBChoice]("Linear2",group=BG,value=true)),
                    BoxCell(RadioButton[RBShell]("Binary",group=BG,value=false)),
                    BoxCell(RadioButton[RBHoare]("Ternary",group=BG,value=false))
                ),
                BoxRow(border=true,
                    BoxCell(Button("Estimate",onclick=Evaluate(function="ShowEst"))), 
                    BoxCell(Slider['Sl'](10..20, NUM,onchange='ChangeMas','showticks', 'majorticks'=10, 'minorticks'=2,'snapticks'=true))
                )
            )
        )
    ),
    ButtonGroup[BG](onchange=Evaluate(function="Change")),
    Action['ChangeMas'](Evaluate(function='ReSort'))
):
Maplets[Display](M);
NULL;
